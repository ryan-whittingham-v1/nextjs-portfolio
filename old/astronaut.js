/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';

export default function Astronaut(pose, ...props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/Walking astronaut.glb');
  const { actions, names } = useAnimations(animations, group);
  const [index, setIndex] = useState(1);

  useEffect(() => {
    console.log(actions);
    let action = 'floating';

    if (index === 1) {
      action = 'floating';
    }
    if (index === 2) {
      action = 'wave';
    }
    if (index === 3) {
      action = 'moon_walk';
    }
    console.log(action);
    console.log(index);

    // Reset and fade in animation after an index has been changed
    actions[action].reset().fadeIn(0.5).play();
    // In the clean-up phase, fade it out
    return () => actions[action].fadeOut(0.5);
  }, [index, actions, names]);

  // Rotate mesh every frame, this is outside of React without overhead
  /* useFrame(() => {
    group.current.rotation.z -= 0.001;
    group.current.rotation.x += 0.0005;
  }); */

  return (
    <group ref={group} {...props} dispose={null}>
      <group
        scale={[0.015, 0.015, 0.015]}
        onClick={() => setIndex((index + 1) % 4)}
      >
        <skinnedMesh
          geometry={nodes.mesh_1.geometry}
          material={nodes.mesh_1.material}
          skeleton={nodes.mesh_1.skeleton}
        />
        <skinnedMesh
          geometry={nodes.mesh_0.geometry}
          material={nodes.mesh_0.material}
          skeleton={nodes.mesh_0.skeleton}
        />
        <skinnedMesh
          geometry={nodes.mesh_2.geometry}
          material={nodes.mesh_2.material}
          skeleton={nodes.mesh_2.skeleton}
        />
        <primitive object={nodes.Root4} />
      </group>
    </group>
  );
}

useGLTF.preload('/Walking astronaut.glb');
